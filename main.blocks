<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="SeZ*JL!x(?{h9rd%w6:q" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="_`gGZhE|7MLUXlH1jyk="><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace randomMusic {" line1="    let rngSeed = 1" line2="    let currentKeyIsMajor = true" line3="    let noteLog: number[] = []" line4="" line5="    const majorScale = [0, 2, 4, 5, 7, 9, 11]" line6="    const minorScale = [0, 2, 3, 5, 7, 8, 10]" line7="" line8="    /**" line9="     * Set the seed for music generation" line10="     */" line11="    //% block=&quot;set music seed to %seed&quot;" line12="    export function setMusicSeed(seed: number): void {" line13="        rngSeed = seed" line14="    }" line15="" line16="    // Basic seeded PRNG" line17="    function seededRandom(min: number, max: number): number {" line18="        rngSeed = (rngSeed * 16807) % 2147483647" line19="        return min + (rngSeed % (max - min + 1))" line20="    }" line21="" line22="    /**" line23="     * Set major or minor key" line24="     */" line25="    //% block=&quot;set music key to major %isMajor&quot;" line26="    //% isMajor.shadow=&quot;toggleOnOff&quot;" line27="    export function setMusicKey(isMajor: boolean): void {" line28="        currentKeyIsMajor = isMajor" line29="    }" line30="" line31="    function getScaleNote(): number {" line32="        const scale = currentKeyIsMajor ? majorScale : minorScale" line33="        const base = 220" line34="        const step = scale[seededRandom(0, scale.length - 1)]" line35="        return base * Math.pow(2, step / 12)" line36="    }" line37="" line38="    /**" line39="     * Play a random sound effect" line40="     */" line41="    //% block=&quot;play random sound effect&quot;" line42="    export function playRandomSound(): void {" line43="        const freqStart = getScaleNote()" line44="        const freqEnd = getScaleNote()" line45="        const duration = seededRandom(100, 300)" line46="" line47="        noteLog.push(freqStart)" line48="" line49="        music.play(music.createSoundEffect(" line50="            WaveShape.Sine," line51="            freqStart," line52="            freqEnd," line53="            255," line54="            0," line55="            duration," line56="            SoundExpressionEffect.None," line57="            InterpolationCurve.Linear" line58="        ), music.PlaybackMode.UntilDone)" line59="    }" line60="" line61="    /**" line62="     * Play a rhythm of random notes" line63="     */" line64="    //% block=&quot;play random rhythm sequence&quot;" line65="    export function playRandomRhythm(): void {" line66="        const beatDurations = [100, 200, 300]" line67="        for (let i = 0; i &lt; 8; i++) {" line68="            playRandomSound()" line69="            pause(beatDurations[seededRandom(0, beatDurations.length - 1)])" line70="        }" line71="    }" line72="" line73="    /**" line74="     * Play a hybrid beat combining presets and random variations" line75="     */" line76="    //% block=&quot;play hybrid beat&quot;" line77="    export function playHybridBeat(): void {" line78="        const patterns: string[][] = [" line79="            [&quot;C4&quot;, &quot;-&quot;, &quot;C4&quot;, &quot;-&quot;, &quot;C4&quot;, &quot;-&quot;, &quot;C4&quot;, &quot;-&quot;]," line80="            [&quot;C4&quot;, &quot;C4&quot;, &quot;-&quot;, &quot;C4&quot;, &quot;-&quot;, &quot;C4&quot;, &quot;C4&quot;, &quot;-&quot;]," line81="            [&quot;C4&quot;, &quot;-&quot;, &quot;-&quot;, &quot;C4&quot;, &quot;C4&quot;, &quot;-&quot;, &quot;-&quot;, &quot;C4&quot;]" line82="        ]" line83="        const base2 = patterns[seededRandom(0, patterns.length - 1)]" line84="        const hybrid = base2.map(b =&gt; {" line85="            if (seededRandom(0, 99) &lt; 30) {" line86="                return seededRandom(0, 1) === 0 ? &quot;C4&quot; : &quot;-&quot;" line87="            }" line88="            return b" line89="        })" line90="" line91="        for (let b of hybrid) {" line92="            if (b == &quot;C4&quot;) {" line93="                music.playTone(Note.C, music.beat(BeatFraction.Eighth))" line94="            } else {" line95="                pause(music.beat(BeatFraction.Eighth))" line96="            }" line97="        }" line98="    }" line99="" line100="    /**" line101="     * Play a full random song between 12s and 2m using patterns and beat" line102="     */" line103="    //% block=&quot;play full random song&quot;" line104="    export function playFullRandomSong(): void {" line105="        noteLog = []" line106="        const beatDurations2 = [250, 350, 500]" line107="        const minDuration = 12000" line108="        const maxDuration = 120000" line109="        const targetDuration = seededRandom(minDuration, maxDuration)" line110="        let elapsed = 0" line111="" line112="        const pattern: number[] = []" line113="        const patternLength = seededRandom(3, 6)" line114="        const scale2 = currentKeyIsMajor ? majorScale : minorScale" line115="        for (let j = 0; j &lt; patternLength; j++) {" line116="            pattern.push(scale2[seededRandom(0, scale2.length - 1)])" line117="        }" line118="" line119="        const baseFreq = 220" line120="" line121="        while (elapsed &lt; targetDuration) {" line122="            const patternStep = pattern[elapsed % pattern.length]" line123="            const freq = baseFreq * Math.pow(2, patternStep / 12)" line124="            const duration2 = beatDurations2[seededRandom(0, beatDurations2.length - 1)]" line125="" line126="            noteLog.push(freq)" line127="" line128="            music.play(music.createSoundEffect(" line129="                WaveShape.Sine," line130="                freq," line131="                freq," line132="                255," line133="                0," line134="                duration2," line135="                SoundExpressionEffect.None," line136="                InterpolationCurve.Linear" line137="            ), music.PlaybackMode.UntilDone)" line138="" line139="            playHybridBeat()" line140="            pause(duration2)" line141="            elapsed += duration2" line142="        }" line143="    }" line144="}" numlines="145"></mutation></block></statement></block></xml>