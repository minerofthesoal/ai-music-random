<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="Ww%ka#[06^kaE|^[N9cB" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="!mPHDr0Ki^-W/t5QL*`R"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace randomMusic {" line1="    let rngSeed = 1" line2="    let currentKeyIsMajor = true" line3="    let noteLog: number[] = []" line4="    let currentWave: WaveShape = WaveShape.Sine" line5="    let visualizerEnabled = false" line6="" line7="    const majorScale = [0, 2, 4, 5, 7, 9, 11]" line8="    const minorScale = [0, 2, 3, 5, 7, 8, 10]" line9="" line10="    const instrumentWaves: WaveShape[] = [" line11="        WaveShape.Triangle, // Piano" line12="        WaveShape.Sawtooth, // Bass/Strings" line13="        WaveShape.Square,   // Guitar-ish" line14="        WaveShape.Sine,     // Strings" line15="        WaveShape.Noise     // Drums" line16="    ]" line17="" line18="    //% block=&quot;set music seed to %seed&quot;" line19="    export function setMusicSeed(seed: number): void {" line20="        rngSeed = seed" line21="    }" line22="" line23="    function seededRandom(min: number, max: number): number {" line24="        rngSeed = (rngSeed * 16807) % 2147483647" line25="        return min + (rngSeed % (max - min + 1))" line26="    }" line27="" line28="    //% block=&quot;set music key to major %isMajor&quot;" line29="    //% isMajor.shadow=&quot;toggleOnOff&quot;" line30="    export function setMusicKey(isMajor: boolean): void {" line31="        currentKeyIsMajor = isMajor" line32="    }" line33="" line34="    //% block=&quot;set instrument to %wave&quot;" line35="    //% wave.shadow=&quot;waveShapePicker&quot;" line36="    export function setInstrument(wave: WaveShape): void {" line37="        currentWave = wave" line38="    }" line39="" line40="    //% block=&quot;enable visualizer %enabled&quot;" line41="    //% enabled.shadow=&quot;toggleOnOff&quot;" line42="    export function enableVisualizer(enabled: boolean): void {" line43="        visualizerEnabled = enabled" line44="    }" line45="" line46="    function randomizeInstrument() {" line47="        currentWave = instrumentWaves[seededRandom(0, instrumentWaves.length - 1)]" line48="    }" line49="" line50="    function getScaleNote(): number {" line51="        const scale = currentKeyIsMajor ? majorScale : minorScale" line52="        const base = 110" line53="        const octaveOffset = seededRandom(0, 4)" line54="        const step = scale[seededRandom(0, scale.length - 1)] + 12 * octaveOffset" line55="        return base * Math.pow(2, step / 12)" line56="    }" line57="" line58="    function showVisualizer(freq: number) {" line59="        if (!visualizerEnabled) return" line60="        let barHeight = Math.clamp(5, 60, Math.map(freq, 110, 2000, 5, 60))" line61="        let barX = seededRandom(0, 120)" line62="        let col = Math.randomRange(1, 15)" line63="        screen.fillRect(barX, 60 - barHeight, 3, barHeight, col)" line64="    }" line65="" line66="    //% block=&quot;play random sound effect&quot;" line67="    export function playRandomSound(): void {" line68="        const freqStart = getScaleNote()" line69="        const freqEnd = getScaleNote()" line70="        const duration = seededRandom(100, 400)" line71="        noteLog.push(freqStart)" line72="        showVisualizer(freqStart)" line73="" line74="        music.play(music.createSoundEffect(" line75="            currentWave," line76="            freqStart," line77="            freqEnd," line78="            255," line79="            0," line80="            duration," line81="            SoundExpressionEffect.None," line82="            InterpolationCurve.Linear" line83="        ), music.PlaybackMode.UntilDone)" line84="    }" line85="" line86="    //% block=&quot;play random rhythm sequence&quot;" line87="    export function playRandomRhythm(): void {" line88="        const beatDurations = [125, 200, 300, 400]" line89="        for (let i = 0; i &lt; 4; i++) {" line90="            playRandomSound()" line91="            pause(beatDurations[seededRandom(0, beatDurations.length - 1)])" line92="        }" line93="    }" line94="" line95="    //% block=&quot;play hybrid beat&quot;" line96="    export function playHybridBeat(): void {" line97="        const patterns: string[][] = [" line98="            [&quot;C4&quot;, &quot;-&quot;, &quot;C4&quot;, &quot;-&quot;, &quot;C4&quot;, &quot;-&quot;, &quot;C4&quot;, &quot;-&quot;]," line99="            [&quot;C4&quot;, &quot;C4&quot;, &quot;-&quot;, &quot;C4&quot;, &quot;-&quot;, &quot;C4&quot;, &quot;C4&quot;, &quot;-&quot;]," line100="            [&quot;C4&quot;, &quot;-&quot;, &quot;-&quot;, &quot;C4&quot;, &quot;C4&quot;, &quot;-&quot;, &quot;-&quot;, &quot;C4&quot;]" line101="        ]" line102="        const base2 = patterns[seededRandom(0, patterns.length - 1)]" line103="        const hybrid = base2.map(b =&gt; {" line104="            if (seededRandom(0, 99) &lt; 40) {" line105="                return seededRandom(0, 1) === 0 ? &quot;C4&quot; : &quot;-&quot;" line106="            }" line107="            return b" line108="        })" line109="" line110="        for (let b of hybrid) {" line111="            if (b == &quot;C4&quot;) {" line112="                showVisualizer(261.6)" line113="                music.playTone(Note.C, music.beat(BeatFraction.Eighth))" line114="            } else {" line115="                pause(music.beat(BeatFraction.Eighth))" line116="            }" line117="        }" line118="    }" line119="" line120="    //% block=&quot;play full random song&quot;" line121="    export function playFullRandomSong(): void {" line122="        noteLog = []" line123="        randomizeInstrument()" line124="" line125="        screen.fill(0) // clear screen for visualizer" line126="" line127="        const minDuration = 12000" line128="        const maxDuration = 120000" line129="        const targetDuration = seededRandom(minDuration, maxDuration)" line130="        let elapsed = 0" line131="" line132="        const beatDurations2 = [125, 250, 375, 500, 750]" line133="        const scale2 = currentKeyIsMajor ? majorScale : minorScale" line134="" line135="        const patternLength = seededRandom(8, 16)" line136="        const pattern: number[] = []" line137="        for (let j = 0; j &lt; patternLength; j++) {" line138="            const octaveOffset2 = seededRandom(0, 4)" line139="            const step2 = scale2[seededRandom(0, scale2.length - 1)] + 12 * octaveOffset2" line140="            pattern.push(step2)" line141="        }" line142="" line143="        const baseFreq = 110" line144="" line145="        while (elapsed &lt; targetDuration) {" line146="            const step3 = pattern[seededRandom(0, pattern.length - 1)]" line147="            const freq = baseFreq * Math.pow(2, step3 / 12)" line148="            const duration2 = beatDurations2[seededRandom(0, beatDurations2.length - 1)]" line149="" line150="            noteLog.push(freq)" line151="            showVisualizer(freq)" line152="" line153="            const choice = seededRandom(0, 2)" line154="            if (choice === 0) {" line155="                music.play(music.createSoundEffect(" line156="                    currentWave," line157="                    freq," line158="                    freq," line159="                    255," line160="                    0," line161="                    duration2," line162="                    SoundExpressionEffect.None," line163="                    InterpolationCurve.Linear" line164="                ), music.PlaybackMode.UntilDone)" line165="            } else if (choice === 1) {" line166="                playRandomRhythm()" line167="            } else {" line168="                playHybridBeat()" line169="            }" line170="" line171="            pause(duration2)" line172="            elapsed += duration2" line173="        }" line174="" line175="        if (visualizerEnabled) {" line176="            pause(1000)" line177="            screen.fill(0)" line178="        }" line179="    }" line180="}" numlines="181"></mutation></block></statement></block></xml>